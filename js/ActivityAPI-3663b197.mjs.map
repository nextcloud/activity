{"version":3,"file":"ActivityAPI-3663b197.mjs","sources":["../src/utils/ActivityAPI.ts"],"sourcesContent":["import type ActivityModel from '../models/ActivityModel.js'\nimport logger from './logger.js'\n\ninterface MountOptions {\n\t/**\n\t * Trigger reloading the activities\n\t */\n\treload: () => void\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tfileInfo: any\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tcontext: any\n}\n\n/**\n * An external action that shoud be mounted inside the Activity sidebar panel\n */\nexport interface IActivitySidebarAction {\n\t/**\n\t * The action is called with the HTML element where is should be mounted\n\t */\n\tmount: (element: HTMLElement, options: MountOptions) => void\n\n\t/**\n\t * Called just before the sidebar is destroyed to allow plugins to cleanup\n\t */\n\tunmount: () => void\n}\n\n/**\n * Additional actions that should be shown for an activity\n */\nexport interface IActivityAction {\n\t/**\n\t * Label of the action\n\t */\n\tlabel: string\n\t/**\n\t * An optional icon for the action, must be a valid SVG as string\n\t */\n\ticon: string\n\t/**\n\t * The handler that is called on click\n\t */\n\thandler: (activity: ActivityModel) => void\n}\n\ntype IActivityActionFactory = (options: { activity: ActivityModel, reload: () => void }) => IActivityAction[]\n\ndeclare global {\n\tinterface Window {\n\t\tOCA?: {\n\t\t\tActivity?: {\n\t\t\t\t/**\n\t\t\t\t * Register new actions for a given activity type\n\t\t\t\t */\n\t\t\t\tregisterAction: (activityType: string, action: IActivityActionFactory) => void\n\t\t\t\t/**\n\t\t\t\t * Register an external action that should be shown in the Activity sidebar panel\n\t\t\t\t */\n\t\t\t\tregisterSidebarAction: (action: IActivitySidebarAction) => void\n\t\t\t\t__sidebar_actions: IActivitySidebarAction[]\n\t\t\t\t__activity_actions: Record<string, IActivityActionFactory[]>\n\t\t\t},\n\t\t\tViewer?: {\n\t\t\t\topen(options: { path?: string, fileInfo?: unknown }): void\n\t\t\t\tget mimetypes(): string[]\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Register the global API\n */\nexport function registerGlobalAPI() {\n\twindow.OCA = window.OCA ?? {}\n\twindow.OCA.Activity = {\n\t\t...window.OCA.Activity,\n\t\t__sidebar_actions: window.OCA.Activity?.__sidebar_actions ?? [],\n\t\t__activity_actions: window.OCA.Activity?.__activity_actions ?? {},\n\n\t\tregisterSidebarAction(action: IActivitySidebarAction) {\n\t\t\tlogger.debug('Registered new sidebar action')\n\t\t\twindow.OCA!.Activity!.__sidebar_actions.push(action)\n\t\t},\n\n\t\tregisterAction(activityType: string, action: IActivityActionFactory) {\n\t\t\twindow!.OCA!.Activity!.__activity_actions[activityType] = window.OCA!.Activity!.__activity_actions[activityType] ?? []\n\t\t\twindow!.OCA!.Activity!.__activity_actions[activityType]!.push(action)\n\t\t},\n\t}\n\n\tlogger.info('Activity API registered')\n}\n\n/**\n * Get all external actions that should be showed in the Activity panel\n */\nexport function getSidebarActions() {\n\treturn window.OCA?.Activity?.__sidebar_actions ?? []\n}\n\n/**\n * Get all additional actions for a given activity type\n * @param activityType The activity type for which to query\n */\nexport function getActions(activityType: string) {\n\treturn window.OCA?.Activity?.__activity_actions?.[activityType] ?? []\n}\n"],"names":["registerGlobalAPI","action","logger","activityType","getSidebarActions","getActions"],"mappings":";0CA2EO,SAASA,GAAoB,CAC5B,OAAA,IAAM,OAAO,KAAO,CAAA,EAC3B,OAAO,IAAI,SAAW,CACrB,GAAG,OAAO,IAAI,SACd,kBAAmB,OAAO,IAAI,UAAU,mBAAqB,CAAC,EAC9D,mBAAoB,OAAO,IAAI,UAAU,oBAAsB,CAAC,EAEhE,sBAAsBC,EAAgC,CACrDC,EAAO,MAAM,+BAA+B,EAC5C,OAAO,IAAK,SAAU,kBAAkB,KAAKD,CAAM,CACpD,EAEA,eAAeE,EAAsBF,EAAgC,CAC5D,OAAA,IAAK,SAAU,mBAAmBE,CAAY,EAAI,OAAO,IAAK,SAAU,mBAAmBA,CAAY,GAAK,CAAA,EACpH,OAAQ,IAAK,SAAU,mBAAmBA,CAAY,EAAG,KAAKF,CAAM,CACrE,CAAA,EAGDC,EAAO,KAAK,yBAAyB,CACtC,CAKO,SAASE,GAAoB,CACnC,OAAO,OAAO,KAAK,UAAU,mBAAqB,CAAA,CACnD,CAMO,SAASC,EAAWF,EAAsB,CAChD,OAAO,OAAO,KAAK,UAAU,qBAAqBA,CAAY,GAAK,EACpE"}